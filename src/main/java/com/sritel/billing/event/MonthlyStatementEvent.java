/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package com.sritel.billing.event;

import org.apache.avro.specific.SpecificData;
import org.apache.avro.util.Utf8;
import org.apache.avro.message.BinaryMessageEncoder;
import org.apache.avro.message.BinaryMessageDecoder;
import org.apache.avro.message.SchemaStore;

@org.apache.avro.specific.AvroGenerated
public class MonthlyStatementEvent extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = 8048527261397487639L;


  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"MonthlyStatementEvent\",\"namespace\":\"com.sritel.billing.event\",\"fields\":[{\"name\":\"email\",\"type\":\"string\"},{\"name\":\"month\",\"type\":\"string\"},{\"name\":\"year\",\"type\":\"string\"},{\"name\":\"firstName\",\"type\":\"string\"},{\"name\":\"lastName\",\"type\":\"string\"},{\"name\":\"statementRecords\",\"type\":{\"type\":\"array\",\"items\":{\"type\":\"record\",\"name\":\"StatementRecord\",\"fields\":[{\"name\":\"paymentDate\",\"type\":\"string\"},{\"name\":\"amount\",\"type\":\"double\"}]}}}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }

  private static final SpecificData MODEL$ = new SpecificData();

  private static final BinaryMessageEncoder<MonthlyStatementEvent> ENCODER =
      new BinaryMessageEncoder<>(MODEL$, SCHEMA$);

  private static final BinaryMessageDecoder<MonthlyStatementEvent> DECODER =
      new BinaryMessageDecoder<>(MODEL$, SCHEMA$);

  /**
   * Return the BinaryMessageEncoder instance used by this class.
   * @return the message encoder used by this class
   */
  public static BinaryMessageEncoder<MonthlyStatementEvent> getEncoder() {
    return ENCODER;
  }

  /**
   * Return the BinaryMessageDecoder instance used by this class.
   * @return the message decoder used by this class
   */
  public static BinaryMessageDecoder<MonthlyStatementEvent> getDecoder() {
    return DECODER;
  }

  /**
   * Create a new BinaryMessageDecoder instance for this class that uses the specified {@link SchemaStore}.
   * @param resolver a {@link SchemaStore} used to find schemas by fingerprint
   * @return a BinaryMessageDecoder instance for this class backed by the given SchemaStore
   */
  public static BinaryMessageDecoder<MonthlyStatementEvent> createDecoder(SchemaStore resolver) {
    return new BinaryMessageDecoder<>(MODEL$, SCHEMA$, resolver);
  }

  /**
   * Serializes this MonthlyStatementEvent to a ByteBuffer.
   * @return a buffer holding the serialized data for this instance
   * @throws java.io.IOException if this instance could not be serialized
   */
  public java.nio.ByteBuffer toByteBuffer() throws java.io.IOException {
    return ENCODER.encode(this);
  }

  /**
   * Deserializes a MonthlyStatementEvent from a ByteBuffer.
   * @param b a byte buffer holding serialized data for an instance of this class
   * @return a MonthlyStatementEvent instance decoded from the given buffer
   * @throws java.io.IOException if the given bytes could not be deserialized into an instance of this class
   */
  public static MonthlyStatementEvent fromByteBuffer(
      java.nio.ByteBuffer b) throws java.io.IOException {
    return DECODER.decode(b);
  }

  private java.lang.CharSequence email;
  private java.lang.CharSequence month;
  private java.lang.CharSequence year;
  private java.lang.CharSequence firstName;
  private java.lang.CharSequence lastName;
  private java.util.List<com.sritel.billing.event.StatementRecord> statementRecords;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public MonthlyStatementEvent() {}

  /**
   * All-args constructor.
   * @param email The new value for email
   * @param month The new value for month
   * @param year The new value for year
   * @param firstName The new value for firstName
   * @param lastName The new value for lastName
   * @param statementRecords The new value for statementRecords
   */
  public MonthlyStatementEvent(java.lang.CharSequence email, java.lang.CharSequence month, java.lang.CharSequence year, java.lang.CharSequence firstName, java.lang.CharSequence lastName, java.util.List<com.sritel.billing.event.StatementRecord> statementRecords) {
    this.email = email;
    this.month = month;
    this.year = year;
    this.firstName = firstName;
    this.lastName = lastName;
    this.statementRecords = statementRecords;
  }

  @Override
  public org.apache.avro.specific.SpecificData getSpecificData() { return MODEL$; }

  @Override
  public org.apache.avro.Schema getSchema() { return SCHEMA$; }

  // Used by DatumWriter.  Applications should not call.
  @Override
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return email;
    case 1: return month;
    case 2: return year;
    case 3: return firstName;
    case 4: return lastName;
    case 5: return statementRecords;
    default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  // Used by DatumReader.  Applications should not call.
  @Override
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: email = (java.lang.CharSequence)value$; break;
    case 1: month = (java.lang.CharSequence)value$; break;
    case 2: year = (java.lang.CharSequence)value$; break;
    case 3: firstName = (java.lang.CharSequence)value$; break;
    case 4: lastName = (java.lang.CharSequence)value$; break;
    case 5: statementRecords = (java.util.List<com.sritel.billing.event.StatementRecord>)value$; break;
    default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  /**
   * Gets the value of the 'email' field.
   * @return The value of the 'email' field.
   */
  public java.lang.CharSequence getEmail() {
    return email;
  }


  /**
   * Sets the value of the 'email' field.
   * @param value the value to set.
   */
  public void setEmail(java.lang.CharSequence value) {
    this.email = value;
  }

  /**
   * Gets the value of the 'month' field.
   * @return The value of the 'month' field.
   */
  public java.lang.CharSequence getMonth() {
    return month;
  }


  /**
   * Sets the value of the 'month' field.
   * @param value the value to set.
   */
  public void setMonth(java.lang.CharSequence value) {
    this.month = value;
  }

  /**
   * Gets the value of the 'year' field.
   * @return The value of the 'year' field.
   */
  public java.lang.CharSequence getYear() {
    return year;
  }


  /**
   * Sets the value of the 'year' field.
   * @param value the value to set.
   */
  public void setYear(java.lang.CharSequence value) {
    this.year = value;
  }

  /**
   * Gets the value of the 'firstName' field.
   * @return The value of the 'firstName' field.
   */
  public java.lang.CharSequence getFirstName() {
    return firstName;
  }


  /**
   * Sets the value of the 'firstName' field.
   * @param value the value to set.
   */
  public void setFirstName(java.lang.CharSequence value) {
    this.firstName = value;
  }

  /**
   * Gets the value of the 'lastName' field.
   * @return The value of the 'lastName' field.
   */
  public java.lang.CharSequence getLastName() {
    return lastName;
  }


  /**
   * Sets the value of the 'lastName' field.
   * @param value the value to set.
   */
  public void setLastName(java.lang.CharSequence value) {
    this.lastName = value;
  }

  /**
   * Gets the value of the 'statementRecords' field.
   * @return The value of the 'statementRecords' field.
   */
  public java.util.List<com.sritel.billing.event.StatementRecord> getStatementRecords() {
    return statementRecords;
  }


  /**
   * Sets the value of the 'statementRecords' field.
   * @param value the value to set.
   */
  public void setStatementRecords(java.util.List<com.sritel.billing.event.StatementRecord> value) {
    this.statementRecords = value;
  }

  /**
   * Creates a new MonthlyStatementEvent RecordBuilder.
   * @return A new MonthlyStatementEvent RecordBuilder
   */
  public static com.sritel.billing.event.MonthlyStatementEvent.Builder newBuilder() {
    return new com.sritel.billing.event.MonthlyStatementEvent.Builder();
  }

  /**
   * Creates a new MonthlyStatementEvent RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new MonthlyStatementEvent RecordBuilder
   */
  public static com.sritel.billing.event.MonthlyStatementEvent.Builder newBuilder(com.sritel.billing.event.MonthlyStatementEvent.Builder other) {
    if (other == null) {
      return new com.sritel.billing.event.MonthlyStatementEvent.Builder();
    } else {
      return new com.sritel.billing.event.MonthlyStatementEvent.Builder(other);
    }
  }

  /**
   * Creates a new MonthlyStatementEvent RecordBuilder by copying an existing MonthlyStatementEvent instance.
   * @param other The existing instance to copy.
   * @return A new MonthlyStatementEvent RecordBuilder
   */
  public static com.sritel.billing.event.MonthlyStatementEvent.Builder newBuilder(com.sritel.billing.event.MonthlyStatementEvent other) {
    if (other == null) {
      return new com.sritel.billing.event.MonthlyStatementEvent.Builder();
    } else {
      return new com.sritel.billing.event.MonthlyStatementEvent.Builder(other);
    }
  }

  /**
   * RecordBuilder for MonthlyStatementEvent instances.
   */
  @org.apache.avro.specific.AvroGenerated
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<MonthlyStatementEvent>
    implements org.apache.avro.data.RecordBuilder<MonthlyStatementEvent> {

    private java.lang.CharSequence email;
    private java.lang.CharSequence month;
    private java.lang.CharSequence year;
    private java.lang.CharSequence firstName;
    private java.lang.CharSequence lastName;
    private java.util.List<com.sritel.billing.event.StatementRecord> statementRecords;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$, MODEL$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(com.sritel.billing.event.MonthlyStatementEvent.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.email)) {
        this.email = data().deepCopy(fields()[0].schema(), other.email);
        fieldSetFlags()[0] = other.fieldSetFlags()[0];
      }
      if (isValidValue(fields()[1], other.month)) {
        this.month = data().deepCopy(fields()[1].schema(), other.month);
        fieldSetFlags()[1] = other.fieldSetFlags()[1];
      }
      if (isValidValue(fields()[2], other.year)) {
        this.year = data().deepCopy(fields()[2].schema(), other.year);
        fieldSetFlags()[2] = other.fieldSetFlags()[2];
      }
      if (isValidValue(fields()[3], other.firstName)) {
        this.firstName = data().deepCopy(fields()[3].schema(), other.firstName);
        fieldSetFlags()[3] = other.fieldSetFlags()[3];
      }
      if (isValidValue(fields()[4], other.lastName)) {
        this.lastName = data().deepCopy(fields()[4].schema(), other.lastName);
        fieldSetFlags()[4] = other.fieldSetFlags()[4];
      }
      if (isValidValue(fields()[5], other.statementRecords)) {
        this.statementRecords = data().deepCopy(fields()[5].schema(), other.statementRecords);
        fieldSetFlags()[5] = other.fieldSetFlags()[5];
      }
    }

    /**
     * Creates a Builder by copying an existing MonthlyStatementEvent instance
     * @param other The existing instance to copy.
     */
    private Builder(com.sritel.billing.event.MonthlyStatementEvent other) {
      super(SCHEMA$, MODEL$);
      if (isValidValue(fields()[0], other.email)) {
        this.email = data().deepCopy(fields()[0].schema(), other.email);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.month)) {
        this.month = data().deepCopy(fields()[1].schema(), other.month);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.year)) {
        this.year = data().deepCopy(fields()[2].schema(), other.year);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.firstName)) {
        this.firstName = data().deepCopy(fields()[3].schema(), other.firstName);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.lastName)) {
        this.lastName = data().deepCopy(fields()[4].schema(), other.lastName);
        fieldSetFlags()[4] = true;
      }
      if (isValidValue(fields()[5], other.statementRecords)) {
        this.statementRecords = data().deepCopy(fields()[5].schema(), other.statementRecords);
        fieldSetFlags()[5] = true;
      }
    }

    /**
      * Gets the value of the 'email' field.
      * @return The value.
      */
    public java.lang.CharSequence getEmail() {
      return email;
    }


    /**
      * Sets the value of the 'email' field.
      * @param value The value of 'email'.
      * @return This builder.
      */
    public com.sritel.billing.event.MonthlyStatementEvent.Builder setEmail(java.lang.CharSequence value) {
      validate(fields()[0], value);
      this.email = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'email' field has been set.
      * @return True if the 'email' field has been set, false otherwise.
      */
    public boolean hasEmail() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'email' field.
      * @return This builder.
      */
    public com.sritel.billing.event.MonthlyStatementEvent.Builder clearEmail() {
      email = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'month' field.
      * @return The value.
      */
    public java.lang.CharSequence getMonth() {
      return month;
    }


    /**
      * Sets the value of the 'month' field.
      * @param value The value of 'month'.
      * @return This builder.
      */
    public com.sritel.billing.event.MonthlyStatementEvent.Builder setMonth(java.lang.CharSequence value) {
      validate(fields()[1], value);
      this.month = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'month' field has been set.
      * @return True if the 'month' field has been set, false otherwise.
      */
    public boolean hasMonth() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'month' field.
      * @return This builder.
      */
    public com.sritel.billing.event.MonthlyStatementEvent.Builder clearMonth() {
      month = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
      * Gets the value of the 'year' field.
      * @return The value.
      */
    public java.lang.CharSequence getYear() {
      return year;
    }


    /**
      * Sets the value of the 'year' field.
      * @param value The value of 'year'.
      * @return This builder.
      */
    public com.sritel.billing.event.MonthlyStatementEvent.Builder setYear(java.lang.CharSequence value) {
      validate(fields()[2], value);
      this.year = value;
      fieldSetFlags()[2] = true;
      return this;
    }

    /**
      * Checks whether the 'year' field has been set.
      * @return True if the 'year' field has been set, false otherwise.
      */
    public boolean hasYear() {
      return fieldSetFlags()[2];
    }


    /**
      * Clears the value of the 'year' field.
      * @return This builder.
      */
    public com.sritel.billing.event.MonthlyStatementEvent.Builder clearYear() {
      year = null;
      fieldSetFlags()[2] = false;
      return this;
    }

    /**
      * Gets the value of the 'firstName' field.
      * @return The value.
      */
    public java.lang.CharSequence getFirstName() {
      return firstName;
    }


    /**
      * Sets the value of the 'firstName' field.
      * @param value The value of 'firstName'.
      * @return This builder.
      */
    public com.sritel.billing.event.MonthlyStatementEvent.Builder setFirstName(java.lang.CharSequence value) {
      validate(fields()[3], value);
      this.firstName = value;
      fieldSetFlags()[3] = true;
      return this;
    }

    /**
      * Checks whether the 'firstName' field has been set.
      * @return True if the 'firstName' field has been set, false otherwise.
      */
    public boolean hasFirstName() {
      return fieldSetFlags()[3];
    }


    /**
      * Clears the value of the 'firstName' field.
      * @return This builder.
      */
    public com.sritel.billing.event.MonthlyStatementEvent.Builder clearFirstName() {
      firstName = null;
      fieldSetFlags()[3] = false;
      return this;
    }

    /**
      * Gets the value of the 'lastName' field.
      * @return The value.
      */
    public java.lang.CharSequence getLastName() {
      return lastName;
    }


    /**
      * Sets the value of the 'lastName' field.
      * @param value The value of 'lastName'.
      * @return This builder.
      */
    public com.sritel.billing.event.MonthlyStatementEvent.Builder setLastName(java.lang.CharSequence value) {
      validate(fields()[4], value);
      this.lastName = value;
      fieldSetFlags()[4] = true;
      return this;
    }

    /**
      * Checks whether the 'lastName' field has been set.
      * @return True if the 'lastName' field has been set, false otherwise.
      */
    public boolean hasLastName() {
      return fieldSetFlags()[4];
    }


    /**
      * Clears the value of the 'lastName' field.
      * @return This builder.
      */
    public com.sritel.billing.event.MonthlyStatementEvent.Builder clearLastName() {
      lastName = null;
      fieldSetFlags()[4] = false;
      return this;
    }

    /**
      * Gets the value of the 'statementRecords' field.
      * @return The value.
      */
    public java.util.List<com.sritel.billing.event.StatementRecord> getStatementRecords() {
      return statementRecords;
    }


    /**
      * Sets the value of the 'statementRecords' field.
      * @param value The value of 'statementRecords'.
      * @return This builder.
      */
    public com.sritel.billing.event.MonthlyStatementEvent.Builder setStatementRecords(java.util.List<com.sritel.billing.event.StatementRecord> value) {
      validate(fields()[5], value);
      this.statementRecords = value;
      fieldSetFlags()[5] = true;
      return this;
    }

    /**
      * Checks whether the 'statementRecords' field has been set.
      * @return True if the 'statementRecords' field has been set, false otherwise.
      */
    public boolean hasStatementRecords() {
      return fieldSetFlags()[5];
    }


    /**
      * Clears the value of the 'statementRecords' field.
      * @return This builder.
      */
    public com.sritel.billing.event.MonthlyStatementEvent.Builder clearStatementRecords() {
      statementRecords = null;
      fieldSetFlags()[5] = false;
      return this;
    }

    @Override
    @SuppressWarnings("unchecked")
    public MonthlyStatementEvent build() {
      try {
        MonthlyStatementEvent record = new MonthlyStatementEvent();
        record.email = fieldSetFlags()[0] ? this.email : (java.lang.CharSequence) defaultValue(fields()[0]);
        record.month = fieldSetFlags()[1] ? this.month : (java.lang.CharSequence) defaultValue(fields()[1]);
        record.year = fieldSetFlags()[2] ? this.year : (java.lang.CharSequence) defaultValue(fields()[2]);
        record.firstName = fieldSetFlags()[3] ? this.firstName : (java.lang.CharSequence) defaultValue(fields()[3]);
        record.lastName = fieldSetFlags()[4] ? this.lastName : (java.lang.CharSequence) defaultValue(fields()[4]);
        record.statementRecords = fieldSetFlags()[5] ? this.statementRecords : (java.util.List<com.sritel.billing.event.StatementRecord>) defaultValue(fields()[5]);
        return record;
      } catch (org.apache.avro.AvroMissingFieldException e) {
        throw e;
      } catch (java.lang.Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumWriter<MonthlyStatementEvent>
    WRITER$ = (org.apache.avro.io.DatumWriter<MonthlyStatementEvent>)MODEL$.createDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumReader<MonthlyStatementEvent>
    READER$ = (org.apache.avro.io.DatumReader<MonthlyStatementEvent>)MODEL$.createDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

  @Override protected boolean hasCustomCoders() { return true; }

  @Override public void customEncode(org.apache.avro.io.Encoder out)
    throws java.io.IOException
  {
    out.writeString(this.email);

    out.writeString(this.month);

    out.writeString(this.year);

    out.writeString(this.firstName);

    out.writeString(this.lastName);

    long size0 = this.statementRecords.size();
    out.writeArrayStart();
    out.setItemCount(size0);
    long actualSize0 = 0;
    for (com.sritel.billing.event.StatementRecord e0: this.statementRecords) {
      actualSize0++;
      out.startItem();
      e0.customEncode(out);
    }
    out.writeArrayEnd();
    if (actualSize0 != size0)
      throw new java.util.ConcurrentModificationException("Array-size written was " + size0 + ", but element count was " + actualSize0 + ".");

  }

  @Override public void customDecode(org.apache.avro.io.ResolvingDecoder in)
    throws java.io.IOException
  {
    org.apache.avro.Schema.Field[] fieldOrder = in.readFieldOrderIfDiff();
    if (fieldOrder == null) {
      this.email = in.readString(this.email instanceof Utf8 ? (Utf8)this.email : null);

      this.month = in.readString(this.month instanceof Utf8 ? (Utf8)this.month : null);

      this.year = in.readString(this.year instanceof Utf8 ? (Utf8)this.year : null);

      this.firstName = in.readString(this.firstName instanceof Utf8 ? (Utf8)this.firstName : null);

      this.lastName = in.readString(this.lastName instanceof Utf8 ? (Utf8)this.lastName : null);

      long size0 = in.readArrayStart();
      java.util.List<com.sritel.billing.event.StatementRecord> a0 = this.statementRecords;
      if (a0 == null) {
        a0 = new SpecificData.Array<com.sritel.billing.event.StatementRecord>((int)size0, SCHEMA$.getField("statementRecords").schema());
        this.statementRecords = a0;
      } else a0.clear();
      SpecificData.Array<com.sritel.billing.event.StatementRecord> ga0 = (a0 instanceof SpecificData.Array ? (SpecificData.Array<com.sritel.billing.event.StatementRecord>)a0 : null);
      for ( ; 0 < size0; size0 = in.arrayNext()) {
        for ( ; size0 != 0; size0--) {
          com.sritel.billing.event.StatementRecord e0 = (ga0 != null ? ga0.peek() : null);
          if (e0 == null) {
            e0 = new com.sritel.billing.event.StatementRecord();
          }
          e0.customDecode(in);
          a0.add(e0);
        }
      }

    } else {
      for (int i = 0; i < 6; i++) {
        switch (fieldOrder[i].pos()) {
        case 0:
          this.email = in.readString(this.email instanceof Utf8 ? (Utf8)this.email : null);
          break;

        case 1:
          this.month = in.readString(this.month instanceof Utf8 ? (Utf8)this.month : null);
          break;

        case 2:
          this.year = in.readString(this.year instanceof Utf8 ? (Utf8)this.year : null);
          break;

        case 3:
          this.firstName = in.readString(this.firstName instanceof Utf8 ? (Utf8)this.firstName : null);
          break;

        case 4:
          this.lastName = in.readString(this.lastName instanceof Utf8 ? (Utf8)this.lastName : null);
          break;

        case 5:
          long size0 = in.readArrayStart();
          java.util.List<com.sritel.billing.event.StatementRecord> a0 = this.statementRecords;
          if (a0 == null) {
            a0 = new SpecificData.Array<com.sritel.billing.event.StatementRecord>((int)size0, SCHEMA$.getField("statementRecords").schema());
            this.statementRecords = a0;
          } else a0.clear();
          SpecificData.Array<com.sritel.billing.event.StatementRecord> ga0 = (a0 instanceof SpecificData.Array ? (SpecificData.Array<com.sritel.billing.event.StatementRecord>)a0 : null);
          for ( ; 0 < size0; size0 = in.arrayNext()) {
            for ( ; size0 != 0; size0--) {
              com.sritel.billing.event.StatementRecord e0 = (ga0 != null ? ga0.peek() : null);
              if (e0 == null) {
                e0 = new com.sritel.billing.event.StatementRecord();
              }
              e0.customDecode(in);
              a0.add(e0);
            }
          }
          break;

        default:
          throw new java.io.IOException("Corrupt ResolvingDecoder.");
        }
      }
    }
  }
}










